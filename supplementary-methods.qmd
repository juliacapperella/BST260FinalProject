---
title: "Supplementary Methods"
format: html
editor: visual
---

# BST 260: Final Project

*Julia Capperella, Grace Gaultier, Kathryn Saxton*

## Supplementary Methods

### Equations

Equation 1: Population Calculation
$$
\mbox{growth rate} = \frac{population_{2021} - population_{2020}}{population_{2020}}
$$ 
$$
\mbox{population prediction} = population_{2021} \times (1+ \mbox{growth rate}) ^ \mbox{years since 2021}
$$

Equation 2: Rate Calculation 
$$
\mbox{rate per 100,000 people} = 100000 * \frac{\mbox{count}}{\mbox{population}}
$$ 

Equation 3: Excess Mortality Calculations 

Excess deaths are an interesting measurement to analyze. Excess mortality is the difference between the total number of deaths occuring and the expected number of deaths, calculated based on historical seasonal trends. A positive value indicates that COVID-19 may have been responsible for increased the number of deaths, rather than seasonal fluctuations alone.
$$
\mbox{expected deaths} = \frac{\mbox{total deaths}}{\frac{\mbox{percent of expected deaths}}{100}} 
$$ 
$$
\mbox{excess mortality} = \mbox{total deaths - expected deaths}
$$

### Plots and Tables

```{r include = FALSE, echo=FALSE}
library(httr2)
library(janitor)
library(stringr)
library(tidyverse)
library(purrr)
library(jsonlite)
library(lubridate)
```

```{r include = FALSE, warning = FALSE}

#POPULATION DATA

setwd("code/")
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"

request <- request(url)|> req_url_query(get = I("POP_2020,POP_2021,NAME"), `for` = I("state:*"),
                                        key = census_key)
response <- request |> req_perform()
population <- response |> resp_body_json(simplifyVector = TRUE) 

# wrangle population data
population <- population %>%
  row_to_names(row_number = 1) %>%
  as_tibble() %>%   # convert to tibble
  select(-state) %>%   # remove stat column
  rename(state_name = NAME) %>% # rename state column to state_name
  pivot_longer(cols = -state_name, 
               names_to = "year",
               values_to = "population") %>%   # use pivot_longer to tidy
   mutate(year = str_remove(year, "POP_"), # remove POP_ from year
          across(-state_name, as.numeric),   # parse all relevant columns to numeric
          state = state.abb[match(state_name, state.name)], # add state abbreviations using state.abb
          state = case_when(state_name == "Puerto Rico" ~ "PR", 
                           state_name == "District of Columbia" ~ "DC", 
                           TRUE ~ state)) # use case_when to add abbreviations for DC and PR

# REGION DATA


url2 <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions<- fromJSON(url2, simplifyDataFrame = FALSE) # regions <- use jsonlit JSON parser 
regions <- map_df(regions, function(x) data.frame(region = x$region, 
                                       region_name = x$region_name, 
                                       state_name = x$states))
# wrangle region data
regions <- regions %>%
   mutate(region_name = ifelse(region_name == "New York and New Jersey, Puerto Rico, Virgin Islands", "NY&NJ, PR, VI", region_name))

# join with population data
population <- population %>%
  left_join(regions, by = "state_name")

# extrapolate population data for 2022, 2023, and 2024
full_pop <- population |> 
  group_by(state_name, year) |> 
  pivot_wider(names_from = year, values_from = population) |>
  rename(c(y2020 = "2020", y2021 = "2021")) |>
  mutate(growth_rate = (y2021 - y2020) / y2020) |>
  mutate(y2022 = y2021 * (1+growth_rate)) |>
  mutate(y2023 = y2022 * (1+growth_rate)) |>
  mutate(y2024 = y2023 * (1+growth_rate)) |>
  select(-growth_rate) |>
  pivot_longer(-c(state_name, state, region, region_name), names_to = "year", values_to = "population") |>
  ungroup() |>
  mutate(year = str_remove(year, "y")) |>
  mutate(year = as.numeric(year))
  
#COVID DATA

get_cdc_data <- function(url,limit=1000000000) {
  require(httr2)
  ret <- request(url) |> # create request
    req_url_query("$limit" = limit) |> # increase the download limit
    req_perform() |> # perform request
    resp_body_json(simplifyVector = TRUE) # extract the json
  return(ret) # return the data
}

cases_raw <- get_cdc_data("https://data.cdc.gov/resource/pwn4-m3yp.json") # cases data
hosp_raw <- get_cdc_data("https://data.cdc.gov/resource/39z2-9zu6.json") # hospitalizations data
deaths_raw <- get_cdc_data("https://data.cdc.gov/resource/r8kw-7aab.json") # deaths data

## Wrangle cases
cases <- cases_raw |> 
  mutate(cases = parse_number(new_cases), date = as_date(ymd_hms(end_date))) |> # convert cases to numeric and date to date class
  filter(state %in% population$state) |> # keep only jurisdictions included in the population data frame
  mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |> # add columns for the corresponding epiweek and epiyear
  select(state, mmwr_year, mmwr_week, cases) |> # keep only state, epiyear, epiweek, and cases in the cases data frame
  arrange(state, mmwr_year, mmwr_week) # reorder the columns

## Wrangle hosp
hosp <- hosp_raw |> 
  filter(jurisdiction %in% population$state) |>  # keep only jurisdictions included in the population data frame
  rename(hosp = new_covid_19_hospital, state = jurisdiction) |> # rename the columns
  mutate(hosp = as.numeric(hosp), date = as_date(ymd_hms(collection_date))) |> # convert hospitalizations to numeric and date to date class
  mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |> # add columns for the corresponding epiweek and epiyear
  select(state, mmwr_year, mmwr_week, hosp) |> # keep only state, epiyear, epiweek and hospitalizations in the hosp data frame
  group_by(state, mmwr_week, mmwr_year) |> # create groups to help collapse by week
  summarize(hosp = sum(hosp, na.rm = TRUE), n = n(), .groups = "drop") |> # sum hospitalizations within a week
  filter(n == 7) |> # remove weeks with fewer than 7 observations
  select(-n) |> # remove the count column
  arrange(state, mmwr_year, mmwr_week) # reorder the columns

## Wrangle deaths
deaths <- deaths_raw %>%
  mutate(covid_deaths = parse_number(covid_19_deaths),
         total_deaths = parse_number(total_deaths),
         percent_of_expected_deaths = as.numeric(percent_of_expected_deaths)) %>% # convert deaths to numeric
  filter(state %in% population$state_name) %>% # keep only jurisdictions included in the population data frame
  mutate(mmwr_week = as.numeric(mmwr_week),
         mmwr_year = epiyear(ymd_hms(end_date))) %>%
  # mutate/create columns for the corresponding epiweek and epiyear
  select(state, mmwr_year, mmwr_week, covid_deaths, total_deaths, percent_of_expected_deaths) %>%
  # keep only state, epiyear, epiweek and deaths in the deaths data frame
  arrange(state, mmwr_year, mmwr_week) # reorder the column

# Join cases and population data
all_dates <- data.frame(date = seq(make_date(2020, 1, 25),
                                   make_date(2024, 12, 31), 
                                   by = "week")) |>
  mutate(date = ceiling_date(date, unit = "week", week_start = 7) - days(1)) |>
  mutate(mmwr_year = epiyear(date), mmwr_week = epiweek(date)) 

dates_and_pop <- cross_join(all_dates, data.frame(state = unique(full_pop$state))) |> 
  left_join(full_pop, by = c("state", "mmwr_year" = "year"))

dat <- dates_and_pop |> left_join(cases, by = c("state", "mmwr_year", "mmwr_week")) |> # join cases with the dates and population data frame
  left_join(hosp, by = c("state", "mmwr_year", "mmwr_week")) |> # add hospitalizations
  left_join(deaths, by = c("state_name" = "state", "mmwr_year", "mmwr_week")) |>
  arrange(state, date) # reorder the data frame

# EXCESS MORTALITY
dat <- dat %>%
  mutate(expected_deaths = total_deaths / (percent_of_expected_deaths/100),
         excess_mort = total_deaths - expected_deaths)

dat_waves <- dat |>
  mutate(wave = case_when(between(date, make_date(2020, 3, 1), make_date(2020, 8, 31)) ~ 1,
                          between(date, make_date(2020, 9, 1), make_date(2021, 5, 31)) ~ 2,
                          between(date, make_date(2021, 6, 1), make_date(2021, 11, 30)) ~ 3,
                          between(date, make_date(2021, 12, 1), make_date(2022, 3, 31)) ~ 4,
                          between(date, make_date(2022, 4, 1), make_date(2023, 7, 31)) ~ 5,
                                  TRUE ~ NA)
  )

```

```{r include = FALSE}
# Death Rates by Wave

# WAVE 1
wave_1_dr <- dat_waves |>
  filter(wave == 1, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(death_rate_per_100k = mean(covid_deaths / population * 100000))

# WAVE 2
wave_2_dr <- dat_waves |>
  filter(wave == 2, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(death_rate_per_100k = mean(covid_deaths / population * 100000))

# WAVE 3
wave_3_dr <- dat_waves |>
  filter(wave == 3, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(death_rate_per_100k = mean(covid_deaths / population * 100000))

# WAVE 4
wave_4_dr <- dat_waves |>
  filter(wave == 4, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(death_rate_per_100k = mean(covid_deaths / population * 100000))

# WAVE 5
wave_5_dr <- dat_waves |>
  filter(wave == 5, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(death_rate_per_100k = mean(covid_deaths / population * 100000))
```

SI Figure 1: Average Covid 19 Cases, Deaths and Hospitalizations per 100,000 People Over Time

```{r echo = FALSE}
dat |> 
  mutate(case_rate = cases / population * 100000, # calculate the rate of cases per 100,000 people
        hosp_rate = hosp / population * 100000, # calculate the rate of hospitalizations per 100,000 people
        death_rate = covid_deaths / population * 100000) |> # calculate the rate of deaths per 100,000 people
  group_by(date) |>
  summarize(case_rate = sum(population * case_rate, na.rm = TRUE) / sum(population, na.rm = TRUE), 
            hosp_rate = sum(population * hosp_rate, na.rm = TRUE) / sum(population, na.rm = TRUE),
            death_rate = sum(population * death_rate, na.rm = TRUE) / sum(population, na.rm = TRUE),
            .groups = "drop") |>
  pivot_longer(cols = c("case_rate", "hosp_rate", "death_rate"), 
               names_to = "type", values_to = "rates") |> # change the format of the table for plotting
  ggplot(aes(x=date, y=rates)) + # create the plot with date on the x and rates on the y, colored by region and grouped by state
  geom_line() + # add lines
  labs(x = "Date", y ="Weighted Average Rate per 100,000 People", 
       title = "Covid 19 Cases, Deaths and Hospitalizations per 100,000 People Over Time", 
       color = "Region") +
  facet_wrap(~type, ncol = 1, scales = "free_y") # stack the plots vertically and adjust y axis
```

SI Figures 2-6: Covid 19 Death Rates by State for each Wave

```{r echo = FALSE}
# Death Rate Plots by Wave
wave_1_dr |>
  ggplot(aes(x = reorder(state, death_rate_per_100k), y = death_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Covid-19 Death Rate by State for Wave 1",
       x = "State", 
       y = "Death Rate per 100k") +
  coord_flip()  # flip coordinates

wave_2_dr |>
  ggplot(aes(x = reorder(state, death_rate_per_100k), y = death_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Covid-19 Death Rate by State for Wave 2",
       x = "State", 
       y = "Weekly Death Rate per 100k") +
  coord_flip()  # flip coordinates

wave_3_dr |>
  ggplot(aes(x = reorder(state, death_rate_per_100k), y = death_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Covid-19 Death Rate by State for Wave 3",
       x = "State", 
       y = "Average Weekly Death Rate per 100k") +
  coord_flip()  # flip coordinates

wave_4_dr |>
  ggplot(aes(x = reorder(state, death_rate_per_100k), y = death_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Covid-19 Death Rate by State for Wave 4",
       x = "State", 
       y = "Average Weekly Death Rate per 100k") +
  coord_flip()  # flip coordinates

wave_5_dr |>
  ggplot(aes(x = reorder(state, death_rate_per_100k), y = death_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Covid-19 Death Rate by State for Wave 5",
       x = "State", 
       y = "Average Weekly Death Rate per 100k") +
  coord_flip()  # flip coordinates
```

SI Table 1: State Performance By Death Rate per 100k People

| State           | Top 5 Frequency | Bottom 5 Frequency |
|-----------------|-----------------|--------------------|
| Hawaii          | 3               | 0                  |
| Washington      | 3               | 0                  |
| New York        | 3               | 0                  |
| Vermont         | 3               | 1                  |
| Oregon          | 2               | 0                  |
| Puerto Rico     | 2               | 0                  |
| Alaska          | 2               | 0                  |
| Utah            | 2               | 0                  |
| Wyoming         | 2               | 2                  |
| Texas           | 1               | 0                  |
| Massachusetts   | 1               | 1                  |
| New Jersey      | 1               | 1                  |
| Connecticut     | 1               | 1                  |
| Washington D.C. | 0               | 1                  |
| North Dakota    | 0               | 1                  |
| South Dakota    | 0               | 1                  |
| Ohio            | 0               | 1                  |
| New Mexico      | 0               | 1                  |
| Montana         | 0               | 1                  |
| Delaware        | 0               | 1                  |
| Maine           | 0               | 1                  |
| Rhode Island    | 0               | 2                  |
| Oklahoma        | 0               | 2                  |
| West Virginia   | 0               | 2                  |
| Kentucky        | 0               | 2                  |

SI Figures 7-11: Excess Mortality Rates by State for each Wave

```{r echo = FALSE}
# differences by state
wave_1_em_diff <- dat_waves |>
  filter(wave == 1, !is.na(covid_deaths)) |> 
    mutate(death_diff = covid_deaths - excess_mort) |>
  group_by(state) |>
  summarize(diff_per_100k = mean(death_diff / population * 100000)) 

wave_1_em_diff |>
  ggplot(aes(x = reorder(state, diff_per_100k), y = diff_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Unexplained Mortality by State for Wave 1",
       x = "State", 
       y = "Unexplained Mortality per 100k") +
  coord_flip()  # flip coordinates

wave_2_em_diff <- dat_waves |>
  filter(wave == 2, !is.na(covid_deaths)) |> 
    mutate(death_diff = covid_deaths - excess_mort) |>
  group_by(state) |>
  summarize(diff_per_100k = mean(death_diff / population * 100000)) 

wave_2_em_diff |>
  ggplot(aes(x = reorder(state, diff_per_100k), y = diff_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Unexplained Mortality by State for Wave 2",
       x = "State", 
       y = "Unexplained Mortality per 100k") +
  coord_flip()  # flip coordinates

wave_3_em_diff <- dat_waves |>
  filter(wave == 3, !is.na(covid_deaths)) |> 
    mutate(death_diff = covid_deaths - excess_mort) |>
  group_by(state) |>
  summarize(diff_per_100k = mean(death_diff / population * 100000)) 

wave_3_em_diff |>
  ggplot(aes(x = reorder(state, diff_per_100k), y = diff_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Unexplained Mortality by State for Wave 3",
       x = "State", 
       y = "Unexplained Mortality per 100k") +
  coord_flip()  # flip coordinates

wave_4_em_diff <- dat_waves |>
  filter(wave == 4, !is.na(covid_deaths)) |> 
    mutate(death_diff = covid_deaths - excess_mort) |>
  group_by(state) |>
  summarize(diff_per_100k = mean(death_diff / population * 100000)) 

wave_4_em_diff |>
  ggplot(aes(x = reorder(state, diff_per_100k), y = diff_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Unexplained Mortality by State for Wave 4",
       x = "State", 
       y = "Unexplained Mortality per 100k") +
  coord_flip()  # flip coordinates

wave_5_em_diff <- dat_waves |>
  filter(wave == 5, !is.na(covid_deaths)) |> 
    mutate(death_diff = covid_deaths - excess_mort) |>
  group_by(state) |>
  summarize(diff_per_100k = mean(death_diff / population * 100000)) 

wave_5_em_diff |>
  ggplot(aes(x = reorder(state, diff_per_100k), y = diff_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Unexplained Mortality by State for Wave 5",
       x = "State", 
       y = "Unexplained Mortality per 100k") +
  coord_flip()  # flip coordinates
```

SI Figures 12-16: Excess Mortality Rates by State for each Wave

```{r echo = FALSE}
# Excess Mortality Rates by Wave
# WAVE 1
wave_1_em <- dat_waves |>
  filter(wave == 1, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(em_rate_per_100k = mean(excess_mort / population * 100000))

# WAVE 2
wave_2_em <- dat_waves |>
  filter(wave == 2, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(em_rate_per_100k = mean(excess_mort / population * 100000))

# WAVE 3
wave_3_em <- dat_waves |>
  filter(wave == 3, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(em_rate_per_100k = mean(excess_mort / population * 100000))

# WAVE 4
wave_4_em <- dat_waves |>
  filter(wave == 4, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(em_rate_per_100k = mean(excess_mort / population * 100000))

# WAVE 5
wave_5_em <- dat_waves |>
  filter(wave == 5, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(em_rate_per_100k = mean(excess_mort / population * 100000))

# these plots are just the excess mortality rate, without covid 19 deaths subtracted off
wave_1_em |>
  ggplot(aes(x = reorder(state, em_rate_per_100k), y = em_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Excess Mortality Rate by State for Wave 1",
       x = "State", 
       y = "Excess Mortality Rate per 100k") +
  coord_flip()  # flip coordinates

wave_2_em |>
  ggplot(aes(x = reorder(state, em_rate_per_100k), y = em_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Excess Mortality Rate by State for Wave 2",
       x = "State", 
       y = "Excess Mortality Rate per 100k") +
  coord_flip()  # flip coordinates

wave_3_em |>
  ggplot(aes(x = reorder(state, em_rate_per_100k), y = em_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Excess Mortality Rate by State for Wave 3",
       x = "State", 
       y = "Excess Mortality Rate per 100k") +
  coord_flip()  # flip coordinates

wave_4_em |>
  ggplot(aes(x = reorder(state, em_rate_per_100k), y = em_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Excess Mortality Rate by State for Wave 4",
       x = "State", 
       y = "Excess Mortality Rate per 100k") +
  coord_flip()  # flip coordinates

wave_5_em |>
  ggplot(aes(x = reorder(state, em_rate_per_100k), y = em_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Excess Mortality Rate by State for Wave 5",
       x = "State", 
       y = "Excess Mortality Rate per 100k") +
  coord_flip()  # flip coordinates
```

SI Figures 17-21: Virulence Rates Over Time For Each Wave

```{r echo = FALSE}
# Virulence Rates by Wave
# WAVE 1
# plot of virulence over time
dat_waves |> filter(wave == 1,!is.na(cases), !is.na(hosp), !is.na(covid_deaths)) %>%
  mutate(case_rate = cases / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000, # calculate hosp rate
         death_rate = covid_deaths / population * 100000) %>% # calculate death rate
  mutate(deaths_per_cases = death_rate / case_rate) %>% # calculate deaths/cases
  mutate(hospitalizations_per_cases = hosp_rate / case_rate) %>% # calculate hosp/cases
  mutate(deaths_per_hospitalizations = death_rate / hosp_rate) %>% # calculate deaths/hosp
  pivot_longer(cols = c(deaths_per_cases,
                        deaths_per_hospitalizations,
                        hospitalizations_per_cases),
               names_to = "rate_type",
               values_to = "rate") %>%
  # create the plot with date on x and rates on y, colored by wave and grouped by state
  ggplot(aes(x=date, y=rate, color = factor(wave), group = state)) +
  geom_line() + # add lines
  labs(x = "Date",
       y ="Rate per 100,000 People", 
       title = "Covid 19 Virulence Measures Over Wave 1", 
       color = "Wave") + 
  facet_wrap(~rate_type, ncol = 1, scales = "free_y") # stack the plots vertically and adjust y axis

# WAVE 2
# plot of virulence over time
dat_waves |> filter(wave == 2,!is.na(cases), !is.na(hosp), !is.na(covid_deaths)) %>%
  mutate(case_rate = cases / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000, # calculate hosp rate
         death_rate = covid_deaths / population * 100000) %>% # calculate death rate
  mutate(deaths_per_cases = death_rate / case_rate) %>% # calculate deaths/cases
  mutate(hospitalizations_per_cases = hosp_rate / case_rate) %>% # calculate hosp/cases
  mutate(deaths_per_hospitalizations = death_rate / hosp_rate) %>% # calculate deaths/hosp
  pivot_longer(cols = c(deaths_per_cases,
                        deaths_per_hospitalizations,
                        hospitalizations_per_cases),
               names_to = "rate_type",
               values_to = "rate") %>%
  # create the plot with date on x and rates on y, colored by wave and grouped by state
  ggplot(aes(x=date, y=rate, color = factor(wave), group = state)) +
  geom_line() + # add lines
  labs(x = "Date",
       y ="Rate per 100,000 People", 
       title = "Covid 19 Virulence Measures Over Wave 2", 
       color = "Wave") + 
  facet_wrap(~rate_type, ncol = 1, scales = "free_y") # stack the plots vertically and adjust y axis

# WAVE 3
# plot of virulence over time
dat_waves |> filter(wave == 3,!is.na(cases), !is.na(hosp), !is.na(covid_deaths)) %>%
  mutate(case_rate = cases / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000, # calculate hosp rate
         death_rate = covid_deaths / population * 100000) %>% # calculate death rate
  mutate(deaths_per_cases = death_rate / case_rate) %>% # calculate deaths/cases
  mutate(hospitalizations_per_cases = hosp_rate / case_rate) %>% # calculate hosp/cases
  mutate(deaths_per_hospitalizations = death_rate / hosp_rate) %>% # calculate deaths/hosp
  pivot_longer(cols = c(deaths_per_cases,
                        deaths_per_hospitalizations,
                        hospitalizations_per_cases),
               names_to = "rate_type",
               values_to = "rate") %>%
  # create the plot with date on x and rates on y, colored by wave and grouped by state
  ggplot(aes(x=date, y=rate, color = factor(wave), group = state)) +
  geom_line() + # add lines
  labs(x = "Date",
       y ="Rate per 100,000 People", 
       title = "Covid 19 Virulence Measures Over Wave 3", 
       color = "Wave") + 
  facet_wrap(~rate_type, ncol = 1, scales = "free_y") # stack the plots vertically and adjust y axis

# WAVE 4
# plot of virulence over time
dat_waves |> filter(wave == 4,!is.na(cases), !is.na(hosp), !is.na(covid_deaths)) %>%
  mutate(case_rate = cases / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000, # calculate hosp rate
         death_rate = covid_deaths / population * 100000) %>% # calculate death rate
  mutate(deaths_per_cases = death_rate / case_rate) %>% # calculate deaths/cases
  mutate(hospitalizations_per_cases = hosp_rate / case_rate) %>% # calculate hosp/cases
  mutate(deaths_per_hospitalizations = death_rate / hosp_rate) %>% # calculate deaths/hosp
  pivot_longer(cols = c(deaths_per_cases,
                        deaths_per_hospitalizations,
                        hospitalizations_per_cases),
               names_to = "rate_type",
               values_to = "rate") %>%
  # create the plot with date on x and rates on y, colored by wave and grouped by state
  ggplot(aes(x=date, y=rate, color = factor(wave), group = state)) +
  geom_line() + # add lines
  labs(x = "Date",
       y ="Rate per 100,000 People", 
       title = "Covid 19 Virulence Measures Over Wave 4", 
       color = "Wave") + 
  facet_wrap(~rate_type, ncol = 1, scales = "free_y") # stack the plots vertically and adjust y axis

# WAVE 5
# plot of virulence over time
dat_waves |> filter(wave == 5,!is.na(cases), !is.na(hosp), !is.na(covid_deaths)) %>%
  mutate(case_rate = cases / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000, # calculate hosp rate
         death_rate = covid_deaths / population * 100000) %>% # calculate death rate
  mutate(deaths_per_cases = death_rate / case_rate) %>% # calculate deaths/cases
  mutate(hospitalizations_per_cases = hosp_rate / case_rate) %>% # calculate hosp/cases
  mutate(deaths_per_hospitalizations = death_rate / hosp_rate) %>% # calculate deaths/hosp
  pivot_longer(cols = c(deaths_per_cases,
                        deaths_per_hospitalizations,
                        hospitalizations_per_cases),
               names_to = "rate_type",
               values_to = "rate") %>%
  # create the plot with date on x and rates on y, colored by wave and grouped by state
  ggplot(aes(x=date, y=rate, color = factor(wave), group = state)) +
  geom_line() + # add lines
  labs(x = "Date",
       y ="Rate per 100,000 People", 
       title = "Covid 19 Virulence Measures Over Wave 5", 
       color = "Wave") + 
  facet_wrap(~rate_type, ncol = 1, scales = "free_y") # stack the plots vertically and adjust y axis

```

SI Figures 22-26: Virulence -- Deaths Per Cases Per State For Each Wave

```{r echo = FALSE}
# Virulence Rates by State
# WAVE 1
dat_waves |> filter(wave == 1, !is.na(covid_deaths), !is.na(cases)) %>%
  mutate(death_rate = covid_deaths / population * 100000, # calculate case rate
         case_rate = cases / population * 100000) %>% # calculate hosp rate
  mutate(deaths_per_cases = death_rate / case_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(dpc = mean(deaths_per_cases, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, dpc), y = dpc)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Deaths Per Cases Per State for Wave 1",
       x = "State", 
       y = "Death Rate / Case Rate") +
  coord_flip()  # flip coordinates

# WAVE 2
dat_waves |> filter(wave == 2, !is.na(covid_deaths), !is.na(cases)) %>%
  mutate(death_rate = covid_deaths / population * 100000, # calculate case rate
         case_rate = cases / population * 100000) %>% # calculate hosp rate
  mutate(deaths_per_cases = death_rate / case_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(dpc = mean(deaths_per_cases, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, dpc), y = dpc)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Deaths Per Cases Per State for Wave 2",
       x = "State", 
       y = "Death Rate / Case Rate") +
  coord_flip()  # flip coordinates

# WAVE 3
dat_waves |> filter(wave == 3, !is.na(covid_deaths), !is.na(cases)) %>%
  mutate(death_rate = covid_deaths / population * 100000, # calculate case rate
         case_rate = cases / population * 100000) %>% # calculate hosp rate
  mutate(deaths_per_cases = death_rate / case_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(dpc = mean(deaths_per_cases, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, dpc), y = dpc)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Deaths Per Cases Per State for Wave 3",
       x = "State", 
       y = "Death Rate / Case Rate") +
  coord_flip()  # flip coordinates

# WAVE 4
dat_waves |> filter(wave == 4, !is.na(covid_deaths), !is.na(cases)) %>%
  mutate(death_rate = covid_deaths / population * 100000, # calculate case rate
         case_rate = cases / population * 100000) %>% # calculate hosp rate
  mutate(deaths_per_cases = death_rate / case_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(dpc = mean(deaths_per_cases, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, dpc), y = dpc)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Deaths Per Cases Per State for Wave 4",
       x = "State", 
       y = "Death Rate / Case Rate") +
  coord_flip()  # flip coordinates

# WAVE 5
dat_waves |> filter(wave == 5, !is.na(covid_deaths), !is.na(cases)) %>%
  mutate(death_rate = covid_deaths / population * 100000, # calculate case rate
         case_rate = cases / population * 100000) %>% # calculate hosp rate
  mutate(deaths_per_cases = death_rate / case_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(dpc = mean(deaths_per_cases, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, dpc), y = dpc)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Deaths Per Cases Per State for Wave 5",
       x = "State", 
       y = "Death Rate / Case Rate") +
  coord_flip()  # flip coordinates

```

SI Figures 27-31: Virulence -- Hospitalizations Per Cases Per State For Each Wave

```{r warning = FALSE, echo = FALSE}
# Virulence Rates by State
# WAVE 1
dat_waves |> filter(wave == 1,!is.na(cases), !is.na(hosp)) %>%
  mutate(case_rate = cases / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000) %>% # calculate hosp rate
  mutate(hospitalizations_per_cases = hosp_rate / case_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(hpc = mean(hospitalizations_per_cases, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, hpc), y = hpc)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Hosps Per Cases Per State for Wave 1",
       x = "State", 
       y = "Hosp Rate / Case Rate") +
  coord_flip()  # flip coordinates

# WAVE 2
dat_waves |> filter(wave == 2,!is.na(cases), !is.na(hosp)) %>%
  mutate(case_rate = cases / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000) %>% # calculate hosp rate
  mutate(hospitalizations_per_cases = hosp_rate / case_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(hpc = mean(hospitalizations_per_cases, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, hpc), y = hpc)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Hosps Per Cases Per State for Wave 2",
       x = "State", 
       y = "Hosp Rate / Case Rate") +
  coord_flip()  # flip coordinates

# WAVE 3
dat_waves |> filter(wave == 3,!is.na(cases), !is.na(hosp)) %>%
  mutate(case_rate = cases / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000) %>% # calculate hosp rate
  mutate(hospitalizations_per_cases = hosp_rate / case_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(hpc = mean(hospitalizations_per_cases, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, hpc), y = hpc)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Hosps Per Cases Per State for Wave 3",
       x = "State", 
       y = "Hosp Rate / Case Rate") +
  coord_flip()  # flip coordinates

# WAVE 4
dat_waves |> filter(wave == 4,!is.na(cases), !is.na(hosp)) %>%
  mutate(case_rate = cases / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000) %>% # calculate hosp rate
  mutate(hospitalizations_per_cases = hosp_rate / case_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(hpc = mean(hospitalizations_per_cases, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, hpc), y = hpc)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Hosps Per Cases Per State for Wave 4",
       x = "State", 
       y = "Hosp Rate / Case Rate") +
  coord_flip()  # flip coordinates

# WAVE 5
dat_waves |> filter(wave == 5,!is.na(cases), !is.na(hosp)) %>%
  mutate(case_rate = cases / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000) %>% # calculate hosp rate
  mutate(hospitalizations_per_cases = hosp_rate / case_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(hpc = mean(hospitalizations_per_cases, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, hpc), y = hpc)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Hosps Per Cases Per State for Wave 5",
       x = "State", 
       y = "Hosp Rate / Case Rate") +
  coord_flip()  # flip coordinates
```

SI Figures 32-36: Virulence -- Deaths Per Hospitalizations Per State For Each Wave

```{r warning = FALSE, echo = FALSE}
# Virulence Rates by State
# WAVE 1
dat_waves |> filter(wave == 1, !is.na(covid_deaths), !is.na(hosp)) %>%
  mutate(death_rate = covid_deaths / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000) %>% # calculate hosp rate
  mutate(deaths_per_hosps = death_rate / hosp_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(dph = mean(deaths_per_hosps, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, dph), y = dph)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Deaths Per Hosps Per State for Wave 1",
       x = "State", 
       y = "Death Rate / Hosp Rate") +
  coord_flip()  # flip coordinates

# WAVE 2
dat_waves |> filter(wave == 2, !is.na(covid_deaths), !is.na(hosp)) %>%
  mutate(death_rate = covid_deaths / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000) %>% # calculate hosp rate
  mutate(deaths_per_hosps = death_rate / hosp_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(dph = mean(deaths_per_hosps, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, dph), y = dph)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Deaths Per Hosps Per State for Wave 2",
       x = "State", 
       y = "Death Rate / Hosp Rate") +
  coord_flip()  # flip coordinates

# WAVE 3
dat_waves |> filter(wave == 3, !is.na(covid_deaths), !is.na(hosp)) %>%
  mutate(death_rate = covid_deaths / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000) %>% # calculate hosp rate
  mutate(deaths_per_hosps = death_rate / hosp_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(dph = mean(deaths_per_hosps, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, dph), y = dph)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Deaths Per Hosps Per State for Wave 3",
       x = "State", 
       y = "Death Rate / Hosp Rate") +
  coord_flip()  # flip coordinates

# WAVE 4
dat_waves |> filter(wave == 4, !is.na(covid_deaths), !is.na(hosp)) %>%
  mutate(death_rate = covid_deaths / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000) %>% # calculate hosp rate
  mutate(deaths_per_hosps = death_rate / hosp_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(dph = mean(deaths_per_hosps, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, dph), y = dph)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Deaths Per Hosps Per State for Wave 4",
       x = "State", 
       y = "Death Rate / Hosp Rate") +
  coord_flip()  # flip coordinates

# WAVE 5
dat_waves |> filter(wave == 5, !is.na(covid_deaths), !is.na(hosp)) %>%
  mutate(death_rate = covid_deaths / population * 100000, # calculate case rate
         hosp_rate = hosp / population * 100000) %>% # calculate hosp rate
  mutate(deaths_per_hosps = death_rate / hosp_rate) %>% # calculate hosp/cases
  group_by(state) |>
  summarize(dph = mean(deaths_per_hosps, na.rm = TRUE)) %>%
  ggplot(aes(x = reorder(state, dph), y = dph)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Deaths Per Hosps Per State for Wave 5",
       x = "State", 
       y = "Death Rate / Hosp Rate") +
  coord_flip()  # flip coordinates
```