---
title: "FinalProjectReport"
format: html
editor: visual
---

# BST 210: Final Project

*Julia Capperella, Grace Gaultier, Kathryn Saxton*
```{r include = FALSE, echo=FALSE}
library(httr2)
library(janitor)
library(stringr)
library(tidyverse)
library(purrr)
library(jsonlite)
library(lubridate)
```

```{r include = FALSE, warning = FALSE}

#POPULATION DATA

setwd("../code")
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"

request <- request(url)|> req_url_query(get = I("POP_2020,POP_2021,NAME"), `for` = I("state:*"),
                                        key = census_key)
response <- request |> req_perform()
population <- response |> resp_body_json(simplifyVector = TRUE) 

# wrangle population data
population <- population %>%
  row_to_names(row_number = 1) %>%
  as_tibble() %>%   # convert to tibble
  select(-state) %>%   # remove stat column
  rename(state_name = NAME) %>% # rename state column to state_name
  pivot_longer(cols = -state_name, 
               names_to = "year",
               values_to = "population") %>%   # use pivot_longer to tidy
   mutate(year = str_remove(year, "POP_"), # remove POP_ from year
          across(-state_name, as.numeric),   # parse all relevant columns to numeric
          state = state.abb[match(state_name, state.name)], # add state abbreviations using state.abb
          state = case_when(state_name == "Puerto Rico" ~ "PR", 
                           state_name == "District of Columbia" ~ "DC", 
                           TRUE ~ state)) # use case_when to add abbreviations for DC and PR

# REGION DATA


url2 <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions<- fromJSON(url2, simplifyDataFrame = FALSE) # regions <- use jsonlit JSON parser 
regions <- map_df(regions, function(x) data.frame(region = x$region, 
                                       region_name = x$region_name, 
                                       state_name = x$states))
# wrangle region data
regions <- regions %>%
   mutate(region_name = ifelse(region_name == "New York and New Jersey, Puerto Rico, Virgin Islands", "NY&NJ, PR, VI", region_name))

# join with population data
population <- population %>%
  left_join(regions, by = "state_name")

# extrapolate population data for 2022, 2023, and 2024
full_pop <- population |> 
  group_by(state_name, year) |> 
  pivot_wider(names_from = year, values_from = population) |>
  rename(c(y2020 = "2020", y2021 = "2021")) |>
  mutate(growth_rate = (y2021 - y2020) / y2020) |>
  mutate(y2022 = y2021 * (1+growth_rate)) |>
  mutate(y2023 = y2022 * (1+growth_rate)) |>
  mutate(y2024 = y2023 * (1+growth_rate)) |>
  select(-growth_rate) |>
  pivot_longer(-c(state_name, state, region, region_name), names_to = "year", values_to = "population") |>
  ungroup() |>
  mutate(year = str_remove(year, "y")) |>
  mutate(year = as.numeric(year))
  
#COVID DATA

get_cdc_data <- function(url,limit=1000000000) {
  require(httr2)
  ret <- request(url) |> # create request
    req_url_query("$limit" = limit) |> # increase the download limit
    req_perform() |> # perform request
    resp_body_json(simplifyVector = TRUE) # extract the json
  return(ret) # return the data
}

cases_raw <- get_cdc_data("https://data.cdc.gov/resource/pwn4-m3yp.json") # cases data
hosp_raw <- get_cdc_data("https://data.cdc.gov/resource/39z2-9zu6.json") # hospitalizations data
deaths_raw <- get_cdc_data("https://data.cdc.gov/resource/r8kw-7aab.json") # deaths data

## Wrangle cases
cases <- cases_raw |> 
  mutate(cases = parse_number(new_cases), date = as_date(ymd_hms(end_date))) |> # convert cases to numeric and date to date class
  filter(state %in% population$state) |> # keep only jurisdictions included in the population data frame
  mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |> # add columns for the corresponding epiweek and epiyear
  select(state, mmwr_year, mmwr_week, cases) |> # keep only state, epiyear, epiweek, and cases in the cases data frame
  arrange(state, mmwr_year, mmwr_week) # reorder the columns

## Wrangle hosp
hosp <- hosp_raw |> 
  filter(jurisdiction %in% population$state) |>  # keep only jurisdictions included in the population data frame
  rename(hosp = new_covid_19_hospital, state = jurisdiction) |> # rename the columns
  mutate(hosp = as.numeric(hosp), date = as_date(ymd_hms(collection_date))) |> # convert hospitalizations to numeric and date to date class
  mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |> # add columns for the corresponding epiweek and epiyear
  select(state, mmwr_year, mmwr_week, hosp) |> # keep only state, epiyear, epiweek and hospitalizations in the hosp data frame
  group_by(state, mmwr_week, mmwr_year) |> # create groups to help collapse by week
  summarize(hosp = sum(hosp, na.rm = TRUE), n = n(), .groups = "drop") |> # sum hospitalizations within a week
  filter(n == 7) |> # remove weeks with fewer than 7 observations
  select(-n) |> # remove the count column
  arrange(state, mmwr_year, mmwr_week) # reorder the columns

## Wrangle deaths
deaths <- deaths_raw %>%
  mutate(covid_deaths = parse_number(covid_19_deaths),
         total_deaths = parse_number(total_deaths),
         percent_of_expected_deaths = as.numeric(percent_of_expected_deaths)) %>% # convert deaths to numeric
  filter(state %in% population$state_name) %>% # keep only jurisdictions included in the population data frame
  mutate(mmwr_week = as.numeric(mmwr_week),
         mmwr_year = epiyear(ymd_hms(end_date))) %>%
  # mutate/create columns for the corresponding epiweek and epiyear
  select(state, mmwr_year, mmwr_week, covid_deaths, total_deaths, percent_of_expected_deaths) %>%
  # keep only state, epiyear, epiweek and deaths in the deaths data frame
  arrange(state, mmwr_year, mmwr_week) # reorder the column

# Join cases and population data
all_dates <- data.frame(date = seq(make_date(2020, 1, 25),
                                   make_date(2024, 12, 31), 
                                   by = "week")) |>
  mutate(date = ceiling_date(date, unit = "week", week_start = 7) - days(1)) |>
  mutate(mmwr_year = epiyear(date), mmwr_week = epiweek(date)) 

dates_and_pop <- cross_join(all_dates, data.frame(state = unique(full_pop$state))) |> 
  left_join(full_pop, by = c("state", "mmwr_year" = "year"))

dat <- dates_and_pop |> left_join(cases, by = c("state", "mmwr_year", "mmwr_week")) |> # join cases with the dates and population data frame
  left_join(hosp, by = c("state", "mmwr_year", "mmwr_week")) |> # add hospitalizations
  left_join(deaths, by = c("state_name" = "state", "mmwr_year", "mmwr_week")) |>
  arrange(state, date) # reorder the data frame

# EXCESS MORTALITY
dat <- dat %>%
  mutate(expected_deaths = total_deaths / (percent_of_expected_deaths/100),
         excess_mort = total_deaths - expected_deaths)

```
## Abstract

## Introduction

## Methods

In order to adequately study the Covid-19 pandemic in the United States, multiple data sets are required.

## Results

```{r echo = FALSE}
# Plots of Waves
dat_waves <- dat |>
  mutate(wave = case_when(between(date, make_date(2020, 3, 1), make_date(2020, 8, 31)) ~ 1,
                          between(date, make_date(2020, 9, 1), make_date(2021, 5, 31)) ~ 2,
                          between(date, make_date(2021, 6, 1), make_date(2021, 11, 30)) ~ 3,
                          between(date, make_date(2021, 12, 1), make_date(2022, 3, 31)) ~ 4,
                          between(date, make_date(2022, 4, 1), make_date(2023, 7, 31)) ~ 5,
                                  TRUE ~ NA)
  )

dat_waves |> filter(!is.na(wave)) |>
  mutate(case_rate = cases / population * 100000, # calculate the rate of cases per 100,000 people
         hosp_rate = hosp / population * 100000, # calculate the rate of hospitalizations per 100,000 people
         death_rate = covid_deaths / population * 100000) |> # calculate the rate of deaths per 100,000 people
  pivot_longer(cols = c("case_rate", "hosp_rate", "death_rate"), 
               names_to = "type", values_to = "rates") |> # change the format of the table for plotting
  ggplot(aes(x=date, y=rates, color = factor(wave), group = state)) + # create the plot with date on the x and rates on the y, colored by region and grouped by state
  geom_line() + # add lines
  labs(x = "Date", y ="Rate per 100,000 People", 
       title = "Covid 19 Cases, Deaths and Hospitalizations per 100,000 People Over Time", 
       color = "Wave") + 
  facet_wrap(~type, ncol = 1, scales = "free_y") # stack the plots vertically and adjust y axis
```
Figure 1: COVID-19 Pandemic Divided into 5 Waves.

Top 5 Performers

|  | Wave 1 |  Wave 2 | Wave 3 | Wave 4 | Wave 5 |
|--|--------|--------|--------|--------|--------|
| #1 | Alaska (0.00) | Vermont (0.70) | New York (0.70) | Hawaii (1.90) | Alaska (0.00) |
| #2 | Wyoming (0.00) | Washington (1.24) | Massachusetts (0.78) | New York (2.04) | Wyoming (0.27) |
| #3 | Hawaii (0.31) | Oregon (1.33) | New Jersey (0.88) | Utah (2.07) | Texas (0.43) |
| #4 | Vermont (0.33) | Hawaii (1.35) | Connecticut (0.93) | Washington (2.08) | New York (0.46))|
| #5 | Oregon (0.50)| Puerto Rico (1.58) | Vermont (0.95) | Puerto Rico (2.16) | Utah (0.47) |

Bottom 5 Performers

|  | Wave 1 |  Wave 2 | Wave 3 | Wave 4 | Wave 5 |
|--|--------|--------|--------|--------|--------|
| #1 | New Jersey (6.20) | North Dakota (6.87) | Wyoming (5.78) | West Virginia (6.10) | West Virginia (1.35) |
| #2 | Connecticut (5.66) | South Dakota (6.81) | Montana (5.12) | Ohio (6.00) | Vermont (1.27) |
| #3 | Washington D.C. (5.33) | Wyoming (4.93) | West Virginia (5.06) | New Mexico (5.69) | Delaware (1.20)|
| #4 | Rhode Island (4.86) | Oklahoma (4.91) | Alaska (4.65) | Kentucky (5.52) | Kentucky (1.17)|
| #5 | Massachusetts (4.78)| Rhode Island (4.53) | Florida (4.44) | Oklahoma (5.41) | Maine (1.05) |

Table 1: Weekly Death Rates by Wave. Average weekly COVID-19 death rates per 100,000 people are given in parentheses.

```{r echo = FALSE}
# plot of excess mortality over time for each state
dat_waves |> filter(!is.na(wave)) |>
  mutate(ex_mort_per_100k = excess_mort / population * 100000) |>
ggplot(aes(x=date, y=ex_mort_per_100k, color = factor(wave), group = state)) + # create the plot with date on the x and rates on the y, colored by region and grouped by state
  geom_line() + # add lines
  labs(x = "Date", y ="Excess Mortality Rate per 100,000 People", 
       title = "Excess Mortality per 100,000 People Over Time", 
       color = "Wave")
```
Figure 2: Excess Deaths per 100,000 people over time. 

```{r echo = FALSE}
# centered around 0 --> covid prob explains it
dat_waves |> filter(!is.na(wave)) |>
    mutate(death_diff = covid_deaths - excess_mort) |>
  mutate(diff_per_100k = death_diff / population * 100000) |>
ggplot(aes(x=date, y=diff_per_100k, color = factor(wave), group = state)) + # create the plot with date on the x and rates on the y, colored by region and grouped by state
  geom_line() + # add lines
  labs(x = "Date", y ="Diff. in Covid 19 Deaths and Excess Deaths per 100,000 People", 
       title = "Unexplained Deaths per 100,000 People Over Time", 
       color = "Wave")
```
Figure 3: Unexplained Deaths per 100,000 People Over Time. 

## Discussion
