```{r}
library(httr2)
library(janitor)
library(stringr)
library(tidyverse)
library(purrr)
library(jsonlite)
library(lubridate)
```

```{r warning = FALSE}

## Data Wrangling
#POPULATION DATA
setwd(getwd())
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"

request <- request(url)|> req_url_query(get = I("POP_2020,POP_2021,NAME"), `for` = I("state:*"), 
                                        key = census_key)
print(request$url)
response <- request |> req_perform()
population <- response |> resp_body_json(simplifyVector = TRUE) 


population <- population %>%
  row_to_names(row_number = 1) %>%
  as_tibble() %>%   # convert to tibble
  select(-state) %>%   # remove stat column
  rename(state_name = NAME) %>% # rename state column to state_name
  pivot_longer(cols = -state_name, 
               names_to = "year",
               values_to = "population") %>%   # use pivot_longer to tidy
   mutate(year = str_remove(year, "POP_"), # remove POP_ from year
          across(-state_name, as.numeric),   # parse all relevant columns to numeric
          state = state.abb[match(state_name, state.name)], # add state abbreviations using state.abb
          state = case_when(state_name == "Puerto Rico" ~ "PR", 
                           state_name == "District of Columbia" ~ "DC", 
                           TRUE ~ state)) # use case_when to add abbreviations for DC and PR


url2 <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions<- fromJSON(url2, simplifyDataFrame = FALSE) # regions <- use jsonlit JSON parser 
regions <- map_df(regions, function(x) data.frame(region = x$region, 
                                       region_name = x$region_name, 
                                       state_name = x$states))
regions <- regions %>%
   mutate(region_name = ifelse(region_name == "New York and New Jersey, Puerto Rico, Virgin Islands", "NY&NJ, PR, VI", region_name))

population <- population %>%
  left_join(regions, by = "state_name")

full_pop <- population |> 
  group_by(state_name, year) |> 
  pivot_wider(names_from = year, values_from = population) |>
  rename(c(y2020 = "2020", y2021 = "2021")) |>
  mutate(growth_rate = (y2021 - y2020) / y2020) |>
  mutate(y2022 = y2021 * (1+growth_rate)) |>
  mutate(y2023 = y2022 * (1+growth_rate)) |>
  mutate(y2024 = y2023 * (1+growth_rate)) |>
  select(-growth_rate) |>
  pivot_longer(-c(state_name, state, region, region_name), names_to = "year", values_to = "population") |>
  ungroup() |>
  mutate(year = str_remove(year, "y")) |>
  mutate(year = as.numeric(year))

#COVID DATA
get_cdc_data <- function(url,limit=1000000000) {
  require(httr2)
  ret <- request(url) |> # create request
    req_url_query("$limit" = limit) |> # increase the download limit
    req_perform() |> # perform request
    resp_body_json(simplifyVector = TRUE) # extract the json
  return(ret) # return the data
}

cases_raw <- get_cdc_data("https://data.cdc.gov/resource/pwn4-m3yp.json") # cases data
deaths_raw <- get_cdc_data("https://data.cdc.gov/resource/r8kw-7aab.json") # deaths data
hosp_raw <- get_cdc_data("https://data.cdc.gov/resource/39z2-9zu6.json") # hospitalizations data

## Wrangle cases
cases <- cases_raw %>% 
  mutate(cases = parse_number(new_cases),
         date = as_date(ymd_hms(end_date))) %>% # convert cases to numeric and date to date class
  filter(state %in% full_pop$state) %>% # keep only jurisdictions included in the population data frame
  mutate(mmwr_week = epiweek(date),
         mmwr_year = epiyear(date)) %>% # add columns for the corresponding epiweek and epiyear
  select(state, mmwr_year, mmwr_week, cases) %>%
  # keep only state, epiyear, epiweek, and cases in the cases data frame
  arrange(state, mmwr_year, mmwr_week) # reorder the columns

## Wrangle deaths
deaths <- deaths_raw %>%
  mutate(covid_deaths = parse_number(covid_19_deaths),
         total_deaths = parse_number(total_deaths),
         percent_of_expected_deaths = as.numeric(percent_of_expected_deaths)) %>% # convert deaths to numeric
  filter(state %in% full_pop$state_name) %>% # keep only jurisdictions included in the population data frame
  mutate(mmwr_week = as.numeric(mmwr_week),
         mmwr_year = epiyear(ymd_hms(end_date))) %>%
  # mutate/create columns for the corresponding epiweek and epiyear
  select(state, mmwr_year, mmwr_week, covid_deaths, total_deaths, percent_of_expected_deaths) %>%
  # keep only state, epiyear, epiweek and deaths in the deaths data frame
  arrange(state, mmwr_year, mmwr_week) # reorder the column

## Wrangle hosp
hosp <- hosp_raw |> 
  filter(jurisdiction %in% population$state) |>  # keep only jurisdictions included in the population data frame
  rename(hosp = new_covid_19_hospital, state = jurisdiction) |> # rename the columns
  mutate(hosp = as.numeric(hosp), date = as_date(ymd_hms(collection_date))) |> # convert hospitalizations to numeric and date to date class
  mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |> # add columns for the corresponding epiweek and epiyear
  select(state, mmwr_year, mmwr_week, hosp) |> # keep only state, epiyear, epiweek and hospitalizations in the hosp data frame
  group_by(state, mmwr_week, mmwr_year) |> # create groups to help collapse by week
  summarize(hosp = sum(hosp, na.rm = TRUE), n = n(), .groups = "drop") |> # sum hospitalizations within a week
  filter(n == 7) |> # remove weeks with fewer than 7 observations
  select(-n) |> # remove the count column
  arrange(state, mmwr_year, mmwr_week) # reorder the columns


# Join cases and population data
all_dates <- data.frame(date = seq(make_date(2020, 1, 25),
                                   make_date(2024, 12, 31), 
                                   by = "week")) |>
  mutate(date = ceiling_date(date, unit = "week", week_start = 7) - days(1)) |>
  mutate(mmwr_year = epiyear(date), mmwr_week = epiweek(date)) 

dates_and_pop <- cross_join(all_dates, data.frame(state = unique(full_pop$state))) |> 
  left_join(full_pop, by = c("state", "mmwr_year" = "year"))

dat <- dates_and_pop |> left_join(cases, by = c("state", "mmwr_year", "mmwr_week")) |>
  # join cases with the dates and population data frame
  left_join(deaths, by = c("state_name" = "state", "mmwr_year", "mmwr_week")) |>
  left_join(hosp, by = c("state", "mmwr_year", "mmwr_week")) |>
  arrange(state, date) # reorder the data frame


## FIND EXPECTED NUMBER OF DEATHS AND ADD TO DAT FOR FURTHER ANALYSIS

dat <- dat %>%
  mutate(expected_deaths = (percent_of_expected_deaths/100)*total_deaths,
         excess_mort_rate = (total_deaths - expected_deaths)/population*100000)
head(dat)
```


```{r}
# Average Rates Over Time Plots
dat |> 
  mutate(case_rate = cases / population * 100000, # calculate the rate of cases per 100,000 people
        hosp_rate = hosp / population * 100000, # calculate the rate of hospitalizations per 100,000 people
        death_rate = covid_deaths / population * 100000) |> # calculate the rate of deaths per 100,000 people
  group_by(date) |>
  summarize(case_rate = mean(case_rate, na.rm = TRUE), 
            hosp_rate = mean(hosp_rate, na.rm = TRUE),
            death_rate = mean(death_rate, na.rm = TRUE),
            .groups = "drop") |>
  pivot_longer(cols = c("case_rate", "hosp_rate", "death_rate"), 
               names_to = "type", values_to = "rates") |> # change the format of the table for plotting
  ggplot(aes(x=date, y=rates)) + # create the plot with date on the x and rates on the y, colored by region and grouped by state
  geom_line() + # add lines
  labs(x = "Date", y ="Rate per 100,000 People", 
       title = "Covid 19 Cases, Deaths and Hospitalizations per 100,000 People Over Time", 
       color = "Region") +
  facet_wrap(~type, ncol = 1, scales = "free_y") # stack the plots vertically and adjust y axis

dat |> 
  mutate(case_rate = cases / population * 100000, # calculate the rate of cases per 100,000 people
        hosp_rate = hosp / population * 100000, # calculate the rate of hospitalizations per 100,000 people
        death_rate = covid_deaths / population * 100000) |> # calculate the rate of deaths per 100,000 people
  group_by(date) |>
  summarize(case_rate = sum(population * case_rate, na.rm = TRUE) / sum(population, na.rm = TRUE), 
            hosp_rate = sum(population * hosp_rate, na.rm = TRUE) / sum(population, na.rm = TRUE),
            death_rate = sum(population * death_rate, na.rm = TRUE) / sum(population, na.rm = TRUE),
            .groups = "drop") |>
  pivot_longer(cols = c("case_rate", "hosp_rate", "death_rate"), 
               names_to = "type", values_to = "rates") |> # change the format of the table for plotting
  ggplot(aes(x=date, y=rates)) + # create the plot with date on the x and rates on the y, colored by region and grouped by state
  geom_line() + # add lines
  labs(x = "Date", y ="Weighted Averafe Rate per 100,000 People", 
       title = "Covid 19 Cases, Deaths and Hospitalizations per 100,000 People Over Time", 
       color = "Region") +
  facet_wrap(~type, ncol = 1, scales = "free_y") # stack the plots vertically and adjust y axis
```
```{r}
# Plots of Waves
dat_waves <- dat |>
  mutate(wave = case_when(between(date, make_date(2020, 3, 1), make_date(2020, 8, 31)) ~ 1,
                          between(date, make_date(2020, 9, 1), make_date(2021, 5, 31)) ~ 2,
                          between(date, make_date(2021, 6, 1), make_date(2021, 11, 30)) ~ 3,
                          between(date, make_date(2021, 12, 1), make_date(2022, 3, 31)) ~ 4,
                          between(date, make_date(2022, 4, 1), make_date(2023, 7, 31)) ~ 5,
                                  TRUE ~ NA)
  )

dat_waves |> filter(!is.na(wave)) |>
  mutate(case_rate = cases / population * 100000, # calculate the rate of cases per 100,000 people
         hosp_rate = hosp / population * 100000, # calculate the rate of hospitalizations per 100,000 people
         death_rate = covid_deaths / population * 100000) |> # calculate the rate of deaths per 100,000 people
  pivot_longer(cols = c("case_rate", "hosp_rate", "death_rate"), 
               names_to = "type", values_to = "rates") |> # change the format of the table for plotting
  ggplot(aes(x=date, y=rates, color = factor(wave), group = state)) + # create the plot with date on the x and rates on the y, colored by region and grouped by state
  geom_line() + # add lines
  labs(x = "Date", y ="Rate per 100,000 People", 
       title = "Covid 19 Cases, Deaths and Hospitalizations per 100,000 People Over Time", 
       color = "Wave") + 
  facet_wrap(~type, ncol = 1, scales = "free_y") # stack the plots vertically and adjust y axis
```

```{r}
# Death Rates by Wave

# WAVE 1
wave_1_dr <- dat_waves |>
  filter(wave == 1, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(death_rate_per_100k = mean(covid_deaths / population * 100000))

# WAVE 2
wave_2_dr <- dat_waves |>
  filter(wave == 2, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(death_rate_per_100k = mean(covid_deaths / population * 100000))

# WAVE 3
wave_3_dr <- dat_waves |>
  filter(wave == 3, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(death_rate_per_100k = mean(covid_deaths / population * 100000))

# WAVE 4
wave_4_dr <- dat_waves |>
  filter(wave == 4, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(death_rate_per_100k = mean(covid_deaths / population * 100000))

# WAVE 5
wave_5_dr <- dat_waves |>
  filter(wave == 5, !is.na(covid_deaths)) |> 
  group_by(state) |>
  summarize(death_rate_per_100k = mean(covid_deaths / population * 100000))
```

```{r}
# Death Rate Plots by Wave
wave_1_dr |>
  ggplot(aes(x = reorder(state, death_rate_per_100k), y = death_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Covid-19 Death Rate by State for Wave 1",
       x = "State", 
       y = "Death Rate per 100k") +
  coord_flip()  # flip coordinates

wave_2_dr |>
  ggplot(aes(x = reorder(state, death_rate_per_100k), y = death_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Covid-19 Death Rate by State for Wave 2",
       x = "State", 
       y = "Weekly Death Rate per 100k") +
  coord_flip()  # flip coordinates

wave_3_dr |>
  ggplot(aes(x = reorder(state, death_rate_per_100k), y = death_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Covid-19 Death Rate by State for Wave 3",
       x = "State", 
       y = "Average Weekly Death Rate per 100k") +
  coord_flip()  # flip coordinates

wave_4_dr |>
  ggplot(aes(x = reorder(state, death_rate_per_100k), y = death_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Covid-19 Death Rate by State for Wave 4",
       x = "State", 
       y = "Average Weekly Death Rate per 100k") +
  coord_flip()  # flip coordinates

wave_5_dr |>
  ggplot(aes(x = reorder(state, death_rate_per_100k), y = death_rate_per_100k)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Covid-19 Death Rate by State for Wave 5",
       x = "State", 
       y = "Average Weekly Death Rate per 100k") +
  coord_flip()  # flip coordinates
```
```{r}
# Top 5 / Bottom 5 per Wave

# Wave 1
wave_1_dr |> arrange(desc(death_rate_per_100k))
wave_1_dr |> arrange(death_rate_per_100k)

# Wave 2
wave_2_dr |> arrange(desc(death_rate_per_100k))
wave_2_dr |> arrange(death_rate_per_100k)

# Wave 3
wave_3_dr |> arrange(desc(death_rate_per_100k))
wave_3_dr |> arrange(death_rate_per_100k)

# Wave 4
wave_4_dr |> arrange(desc(death_rate_per_100k))
wave_4_dr |> arrange(death_rate_per_100k)

# Wave 5
wave_5_dr |> arrange(desc(death_rate_per_100k))
wave_5_dr |> arrange(death_rate_per_100k)
```



```{r}
#Do COVID deaths explain the excess mortality?

dat_waves %>%
  mutate(diff_covid_excess = covid_deaths - excess_mort) %>%
  summarize(mean(diff_covid_excess, is.na()))

```






























```{r}
#Population by state
full_pop %>%
  ggplot(aes(x = reorder(state, population), y = population, fill = state)) +  # reorder state, assign aesthetic mapping
  geom_col(position = "dodge") + # use geom_col to plot barplot
  labs(title = "Population by State",
       x = "State", 
       y = "Population") +
  coord_flip() + # flip coordinates
  facet_wrap(~ year) +   # facet by year
  theme_minimal() +
  theme(axis.text.y = element_blank()) 
```

Extra Covid Stuff
```{r}
## Full Covid data
covid_df <- cases_raw %>%
  mutate(
    tot_cases = as.numeric(tot_cases),
    new_cases = as.numeric(new_cases),
    tot_deaths = as.numeric(tot_deaths),
    new_deaths = as.numeric(new_deaths),
    new_historic_cases = as.numeric(new_historic_cases),
    new_historic_deaths = as.numeric(new_historic_deaths),
    date_updated = as.Date(date_updated),
    start_date = as.Date(start_date),
    end_date = as.Date(end_date)
  ) 

covid_df <- covid_df %>%
  full_join(full_pop, by = "state")

```



